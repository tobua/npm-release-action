{
  "version": 3,
  "sources": ["../index.js", "../release.js"],
  "sourcesContent": ["import { getInput, info, setFailed } from '@actions/core'\nimport { execSync } from 'child_process'\nimport { getRelease, createRelease } from './release.js'\n\n// Top-level await not yet supported out of the box with default eslint-parser.\nconst run = async () => {\n  try {\n    const token = getInput('NPM_TOKEN')\n\n    if (!token) {\n      return setFailed('Missing NPM_TOKEN action secret.')\n    }\n\n    info(`release-npm-action with node: ${execSync('node -v').toString()}`)\n\n    const { release, type } = getRelease()\n\n    if (!release) {\n      return info('No release requested.')\n    }\n\n    info(type)\n\n    await createRelease()\n  } catch (error) {\n    setFailed(error.message)\n  }\n\n  return null\n}\n\nrun()\n", "import { existsSync } from 'fs'\nimport { resolve } from 'path'\nimport { Writable } from 'stream'\nimport { execSync } from 'child_process'\nimport { info, getInput, setFailed, setOutput } from '@actions/core'\nimport semanticRelease from 'semantic-release'\n\nexport const getRelease = () => {\n  const commitMessage = execSync('git log -1 --pretty=%B').toString()\n  let release = commitMessage.includes('release-npm')\n  let type = 'Release requested through commit annotation.'\n\n  // Manual trigger precedes last commit information.\n  if (getInput('MANUAL_TRIGGER') === 'regular') {\n    release = true\n    type = 'Release requested through manual workflow run.'\n  }\n\n  if (getInput('NPM_TOKEN') === 'debug') {\n    release = true\n    type = 'Release requested through debug mode.'\n  }\n\n  return {\n    release,\n    type,\n  }\n}\n\nconst createWritableStream = () => {\n  const data = []\n  const stream = new Writable()\n\n  // Needs to be manually implemented.\n  // eslint-disable-next-line no-underscore-dangle\n  stream._write = (chunk, encoding, next) => {\n    data.push(chunk.toString())\n    next()\n  }\n\n  stream.print = () => data.join('')\n\n  return stream\n}\n\nexport const createRelease = async () => {\n  const currentBranch = execSync('git rev-parse --abbrev-ref HEAD').toString().trim()\n  const branchConfiguration = { name: currentBranch }\n  const dryRun = getInput('DRY_RUN') === 'true' || getInput('NPM_TOKEN') === 'debug'\n  const debug = getInput('DEBUG') === 'true'\n  const channelInput = getInput('CHANNEL')\n  const folder = getInput('FOLDER')\n\n  if (folder) {\n    info(`Releasing from folder: ${folder} in ${process.cwd()}.`)\n  }\n\n  if (channelInput) {\n    branchConfiguration.channel = channelInput\n  }\n\n  if (channelInput) {\n    info(`Release channel ${channelInput}.`)\n  }\n\n  if (dryRun) {\n    info('Running release in dry run mode.')\n  }\n\n  if (debug) {\n    info('Running release in debug mode.')\n  }\n\n  // TODO for debugging provenance issue only...\n  info(resolve(process.cwd(), '.npmrc'))\n  info(process.cwd(), '.npmrc')\n  info(existsSync(resolve(process.cwd(), '.npmrc')) ? 'exists' : 'doesnt exist')\n\n  const env = {\n    ...process.env,\n    GITHUB_TOKEN: getInput('GITHUB_TOKEN'),\n    NPM_TOKEN: getInput('NPM_TOKEN'),\n    NPM_CONFIG_USERCONFIG: resolve(process.cwd(), '.npmrc'),\n  }\n\n  const logs = createWritableStream()\n  const errors = createWritableStream()\n\n  try {\n    const releaseResult = await semanticRelease(\n      {\n        plugins: [\n          '@semantic-release/commit-analyzer',\n          '@semantic-release/release-notes-generator',\n          folder\n            ? [\n                '@semantic-release/npm',\n                {\n                  pkgRoot: folder,\n                },\n              ]\n            : '@semantic-release/npm',\n          '@semantic-release/github',\n        ],\n        branches: [branchConfiguration],\n        dryRun,\n        debug,\n      },\n      {\n        env,\n        stdout: logs,\n        stderr: errors,\n      }\n    )\n\n    if (!releaseResult) {\n      const printedLogs = logs.print()\n      const printedErrors = errors.print()\n\n      if (printedLogs.includes('no relevant changes, so no new')) {\n        if (getInput('FAIL_ON_SKIP') !== 'false') {\n          setFailed('Failed to create or publish release.')\n        }\n        info('There are no relevant changes, so no new version is released.')\n        info(\n          'See https://github.com/tobua/release-npm-action#troubleshooting for more information.'\n        )\n        return\n      }\n\n      setFailed('Failed to create or publish release.')\n\n      if (printedErrors) {\n        info(printedErrors)\n      }\n      info(printedLogs)\n      return\n    }\n\n    const { nextRelease } = releaseResult\n    const { version, gitTag, channel } = nextRelease\n\n    info(`Released version ${version} in ${channel || 'latest'} channel with ${gitTag} tag.`)\n\n    setOutput('version', version)\n    setOutput('channel', channel)\n    setOutput('tag', gitTag)\n    setOutput('folder', folder)\n  } catch (error) {\n    setFailed(`semantic-release failed with ${error}.`)\n\n    info(logs.print())\n    info(errors.print())\n  }\n}\n"],
  "mappings": "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",
  "names": ["getInput", "info", "setFailed", "execSync", "getInput", "setFailed", "info", "execSync"]
}
